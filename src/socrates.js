// Generated by CoffeeScript 1.3.3
var Socrates;

Socrates = (function() {

  function Socrates(selectors, options) {
    if (options == null) {
      options = {};
    }
    this.getOrInitSession();
    this.defaults['session-id'] = this.sessionId;
    this.config = this.mergeHash(this.defaults, options);
    this.attachHandlers(selectors);
  }

  Socrates.prototype.defaults = {
    'app-name': 'default',
    'agent-id': 'default',
    'event-name': 'default',
    'entity-id': 'default',
    'variation-ids': [],
    'server-url': 'http://localhost:7738/t.gif'
  };

  Socrates.prototype.sessionDuration = 86400000;

  Socrates.prototype.attachHandlers = function(selectors) {
    var binding, elem, s, trackedElements, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = selectors.length; _i < _len; _i++) {
      s = selectors[_i];
      console.log(s);
      trackedElements = document.getElementsByClassName(s);
      console.log(trackedElements);
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = trackedElements.length; _j < _len1; _j++) {
          elem = trackedElements[_j];
          binding = elem.getAttribute('data-soc-binding') || 'click';
          _results1.push(elem.addEventListener(binding, function(evnt) {
            var data, v;
            data = {};
            data['entity-id'] = this.getAttribute('data-entity-id');
            if (v = this.getAttribute('data-variation-ids')) {
              data['variation-ids'] = v.split(/,\s*/);
            }
            return window.socrates.track(data);
          }));
        }
        return _results1;
      })());
    }
    return _results;
  };

  Socrates.prototype.newSessionExpiry = function() {
    var expDate;
    expDate = new Date();
    expDate.setTime(expDate.getTime() + this.sessionDuration);
    return expDate.toGMTString();
  };

  Socrates.prototype.getOrInitSession = function() {
    var c;
    if ((c = this.readCookie({
      name: '_socc'
    }))) {
      console.log('here!');
      this.session_id = c.value;
      return this.refreshCookie(c);
    } else {
      console.log('nope, no cookie!');
      return this.initSession();
    }
  };

  Socrates.prototype.readCookie = function(c) {
    var ary, cName, cookie, found, _i, _len;
    ary = document.cookie.split(';');
    cName = c.name + '=';
    found = null;
    for (_i = 0, _len = ary.length; _i < _len; _i++) {
      cookie = ary[_i];
      cookie = cookie.replace(/^\s+/, '');
      if (cookie.indexOf(cName) === 0) {
        found = cookie.substr(cookie.indexOf(cName), cookie.length);
      }
    }
    return found;
  };

  Socrates.prototype.setCookie = function(c) {
    return document.cookie = this.cookieString(c);
  };

  Socrates.prototype.refreshCookie = function(c) {
    c.expires = this.newSessionExpiry();
    return document.cookie = this.cookieString(c);
  };

  Socrates.prototype.cookieString = function(c) {
    return "" + c.name + "=" + c.value + ";expires=" + c.expires + ";path=" + c.path;
  };

  Socrates.prototype.initSession = function() {
    var cookie;
    cookie = {
      name: '_socc',
      path: '/',
      value: this.genSessionId(),
      expires: this.newSessionExpiry()
    };
    console.log('cooooookie');
    console.log(cookie);
    return this.setCookie(cookie);
  };

  Socrates.prototype.genSessionId = function() {
    var rand1, rand2;
    rand1 = Math.floor(Math.random() * 100000);
    rand2 = Math.floor(Math.random() * 100000);
    return this.sessionId = "" + rand1 + (new Date().getTime()) + rand2;
  };

  Socrates.prototype.track = function(hash) {
    var trackData;
    trackData = this.mergeHash(this.config, hash);
    trackData.time || (trackData.time = new Date().getTime());
    console.log(trackData);
    return this.addGIF(trackData);
  };

  Socrates.prototype.addGIF = function(h) {
    var gif, s, src;
    src = this.genGIFSrc(h);
    gif = document.createElement('img');
    gif.src = src;
    gif.style.display = 'none';
    s = document.getElementsByTagName('script')[0];
    return s.parentNode.insertBefore(gif, s);
  };

  Socrates.prototype.genGIFSrc = function(h) {
    var p, src, v;
    src = h['server-url'] + '?';
    for (p in h) {
      v = h[p];
      if (!(p === 'server-url')) {
        src += "" + p + "=" + v + "&";
      }
    }
    return src = src.substr(0, src.length - 1);
  };

  Socrates.prototype.mergeHash = function(h1, h2) {
    var h3, p, v;
    h3 = h1;
    for (p in h2) {
      v = h2[p];
      h3[p] = v;
    }
    return h3;
  };

  return Socrates;

})();

document.addEventListener('DOMContentLoaded', function() {
  return window.socrates = new Socrates(['socrates']);
});
